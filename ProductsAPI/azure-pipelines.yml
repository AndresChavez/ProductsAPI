trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'master'

stages:
- stage: 'Build'
  displayName: 'Build the docker image'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      name: 'cia-agent-pool'
#      demands:
#      - npm

#    variables:
#      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
#      dotnetSdkVersion: '5.x'

    steps:
    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
#      workingDirectory: $(wwwrootDir)
    - task: Docker@2
      inputs:
        containerRegistry: 'acr-demo'
        repository: 'productsapi'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
    )
  jobs:
  - deployment: Deploy
    pool:
      name: 'cia-agent-pool'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - script: 'cat service.yaml | sed -e "s/{namespace}/default/" | sed -e "s/{tag}/$(Build.BuildId)/" > service.dev.yaml'
            displayName: 'Complete yaml'
          - script: 'cat service.dev.yaml'
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'k8s-knative-dev'
              namespace: 'default'
              command: 'apply'
              arguments: '-f service.dev.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              checkLatest: true


- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: Dev
  #condition: eq(variables['Build.Reason'], 'Schedule')
  jobs:
  - deployment: Deploy
    pool:
      name: 'cia-agent-pool'
    environment: test
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - script: 'cat service.yaml | sed -e "s/{namespace}/default/" | sed -e "s/{tag}/$(Build.BuildId)/" > service.qa.yaml'
            displayName: 'Complete yaml'
          - script: 'cat service.qa.yaml'
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'k8s-knative-dev'
              namespace: 'default'
              command: 'apply'
              arguments: '-f service.qa.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              checkLatest: true


- stage: 'Prod'
  displayName: 'Deploy to the production environment'
  dependsOn: Test
  jobs:
  - deployment: Deploy
    pool:
      name: 'cia-agent-pool'
    environment: prod
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - script: 'cat service.yaml | sed -e "s/{namespace}/default/" | sed -e "s/{tag}/$(Build.BuildId)/" > service.prd.yaml'
            displayName: 'Complete yaml'
          - script: 'cat service.prd.yaml'
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'k8s-knative-dev'
              namespace: 'default'
              command: 'apply'
              arguments: '-f service.prd.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              checkLatest: true


